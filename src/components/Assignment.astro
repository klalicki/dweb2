---
import { getEntry } from "astro:content";
import { render } from "astro:content";
const { assignment, level = 3 } = Astro.props;
const { Content } = await render(assignment);

const hasProject = Boolean(assignment.data.project);

const projectData = hasProject
  ? await getEntry(
      assignment.data.project.collection,
      assignment.data.project.id
    )
  : {};

const headingLevels = {
  1: "h1",
  2: "h2",
  3: "h3",
  4: "h4",
  5: "h5",
  6: "h6",
};
const Heading = headingLevels[level] || "h3";

const parentInfo = await getEntry("lessons", assignment.id.split("_")[0]);
const assignedDate = new Date(parentInfo?.data.date).toLocaleDateString();
const dateString = new Date(assignment.data.due).toLocaleDateString("en-US", {
  year: "numeric",
  month: "long",
  day: "numeric",
  weekday: "long",
});
---

<article class="assignment text-frame">
  <Heading>{assignment.data.title}</Heading>
  <div class="full-width-group">
    <p class="due-date">Due {dateString}</p>
    <p>
      Assigned <a href={`/classes/${parentInfo?.id}/lesson`}>{assignedDate}</a>
    </p>
  </div>

  {
    hasProject && (
      <p class="project-part">
        Part of{" "}
        <a class="project-tag btn" href={`/projects/${projectData.id}`}>
          {projectData.data.title}
        </a>
      </p>
    )
  }
  <hr />
  <Content />
</article>

<style>
  article.assignment {
    border: 1px solid var(--color-secondary);
    padding: 1rem;
    border-radius: 1rem;
  }
  hr {
    margin: 1rem 0;
  }
  .project-tag {
    padding: 0.25rem;
    font-weight: 500;
    border-radius: 0.25rem;
    border: 1px solid var(--color-primary);
  }
  .project-tag:hover {
    background-color: var(--color-primary);
    color: var(--color-bg);
  }
  .full-width-group {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    flex-wrap: wrap;
  }
</style>

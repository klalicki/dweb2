---
import { getCollection } from "astro:content";
import { unified } from "unified";
import remarkParse from "remark-parse";
import remarkStringify from "remark-stringify";
import { visit } from "unist-util-visit";
import { getImage } from "astro:assets";
import { getEntry } from "astro:content";
const { classID } = Astro.params;

import "./monokai.css";

import FloatingButton from "../../../components/FloatingButton.astro";

// collect all image files from the classes folder with glob
const images = import.meta.glob<{ default: ImageMetadata }>(
  "/src/content/classes/**/*.{jpeg,jpg,png,gif}"
);

/* unified/remark plugin that:
  scans the AST for images
  if an image starts with http: 
    ignore it
  else:
    add it to the array of images to process
  for each image in array:  
    generate an optimized image with Astro
    replace the image's URL in the AST
  wait for all promises to complete and return modified AST
  TODO: maybe extract this to a separate file
    */

const replaceAstroImages = () => {
  return async (tree) => {
    // empty array to hold all the images found in the tree
    const imagesToProcess = [];
    visit(tree, "image", (node) => {
      if (node.url.startsWith("http")) {
        return; // Skip external images
      } else {
        imagesToProcess.push(node);
      }
    });

    const imagePromises = imagesToProcess.map(async (node) => {
      const imagePath = node.url;
      const processedPath = `/src/content/classes/${classID}/${imagePath}`;
      const imageImport = images[processedPath]();
      // console.log(imageImport);
      const processedImage = await getImage({
        src: imageImport,
        width: 1200,
      });
      // console.log(processedImage.src);
      node.url = processedImage.src;
    });
    await Promise.all(imagePromises);
    return tree;
  };
};

export async function getStaticPaths() {
  const slides = await getCollection("slides");
  return slides.map((slide) => {
    return { params: { classID: slide.id } };
  });
}

const slideData = await getEntry("slides", classID);

const content = slideData?.body;

// const processedMd = await remark().use(replaceAstroImages).process(content);
const processedMdObj = await unified()
  .use(remarkParse)
  .use(replaceAstroImages)
  .use(remarkStringify, { rule: "-" })
  .process(content);
const processedMd = processedMdObj.value;
console.log(processedMd);
---

<FloatingButton href={`/classes/${classID}/lesson`}>
  Back to Lesson</FloatingButton
>
<div class="reveal">
  <div class="slides">
    <section data-markdown>
      <textarea data-template set:html={processedMd} />
    </section>
  </div>
</div>
<script>
  import Reveal from "reveal.js";
  import Markdown from "reveal.js/plugin/markdown/markdown.esm.js";
  import RevealHighlight from "reveal.js/plugin/highlight/highlight.esm.js";
  let deck = new Reveal({
    plugins: [Markdown, RevealHighlight],
    // transition: "convex",
    markdown: {
      smartypants: true,
    },
    slideNumber: true,
  });
  deck.initialize();
</script>
<link rel="stylesheet" href="/node_modules/reveal.js/dist/reveal.css" />
<link rel="stylesheet" href="/node_modules/reveal.js/dist/theme/night.css" />
<style>
  textarea {
    display: none;
  }
</style>

---
import { getCollection } from "astro:content";
import { remark } from "remark";
import { visit } from "unist-util-visit";
import { unified } from "unified";
import { getImage } from "astro:assets";
const { slug } = Astro.params;

const images = import.meta.glob<{ default: ImageMetadata }>(
  "/src/content/classes/**/*.{jpeg,jpg,png,gif}"
);
// console.log("Images:", images);

const replaceAstroImages = () => {
  return async (tree) => {
    const imagesToProcess = [];
    visit(tree, "image", (node) => {
      if (node.url.startsWith("http")) {
        return; // Skip external images
      } else {
        imagesToProcess.push(node);
      }
    });

    const imagePromises = imagesToProcess.map(async (node) => {
      const imagePath = node.url;
      const processedPath = `/src/content/classes/${slug}/${imagePath}`;
      const imageImport = images[processedPath]();
      console.log(imageImport);
      const processedImage = await getImage({
        src: imageImport,
        width: 1200,
      });
      // console.log(processedImage.src);
      node.url = processedImage.src;
    });
    await Promise.all(imagePromises);
    return tree;
  };
};

export async function getStaticPaths() {
  const slides = await getCollection("slides");
  return slides.map((slide) => {
    return { params: { slug: slide.id.split("/")[0] } };
  });
}

const pageData = import.meta.glob(`/src/content/classes/*/slides.md`, {
  eager: true,
  query: "?raw",
})[`/src/content/classes/${slug}/slides.md`];

const content = pageData.default;

const processedMd = await remark().use(replaceAstroImages).process(content);
const replaced = processedMd.value.toString().replaceAll("***", "---");
console.log("original md:", content);
console.log("processed md:", replaced);
---

<!-- {JSON.stringify(marpKeys)} -->
<div class="reveal">
  <div class="slides">
    <section data-markdown>
      <textarea data-template set:html={replaced} />
    </section>
  </div>
</div>
<script>
  import Reveal from "reveal.js";
  import Markdown from "reveal.js/plugin/markdown/markdown.esm.js";
  let deck = new Reveal({
    plugins: [Markdown],
    transition: "convex",
    slideNumber: true,
  });
  deck.initialize();
</script>
<link rel="stylesheet" href="/node_modules/reveal.js/dist/reveal.css" />
<link rel="stylesheet" href="/node_modules/reveal.js/dist/theme/night.css" />
<style>
  textarea {
    display: none;
  }
</style>
